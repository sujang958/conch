scalar Date

interface User {
  id: String!
  picture: String!
  bio: String!
  bulletElo: Int!
  blitzElo: Int!
  rapidElo: Int!
  country: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  email: String!
}

type UserWithGamesWithUsers implements User {
  id: String!
  picture: String!
  bio: String!
  bulletElo: Int!
  blitzElo: Int!
  rapidElo: Int!
  country: String!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  email: String!
  whiteGames: [GameWithUsers]!
  blackGames: [GameWithUsers]!
  wonGames: [GameWithUsers]!
}

interface Game {
  id: String!
  increment: Int!
  pgn: String!
  time: Int!
  endedAt: Date!
  createdAt: Date!
  reason: String!

  whiteId: String!
  blackId: String!
  winnerId: String
}

type GameWithUsers implements Game {
  id: String!
  increment: Int!
  pgn: String!
  time: Int!
  endedAt: Date!
  createdAt: Date!
  reason: String!

  whiteId: String!
  blackId: String!
  winnerId: String

  white: User!
  black: User!
  winner: User
}

type Query {
  user(id: String!): UserWithGamesWithUsers
  me: UserWithGamesWithUsers
}

type Mutation {
  login(idToken: String!): UserWithGamesWithUsers
  logout: Boolean
  changeName(name: String!): UserWithGamesWithUsers
  changeBio(bio: String!): UserWithGamesWithUsers
}
